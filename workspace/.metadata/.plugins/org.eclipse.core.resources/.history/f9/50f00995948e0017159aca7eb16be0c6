import java.io.IOException;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.json.JSONArray;
import org.apache.commons.json.JSONException;
import org.apache.commons.json.JSONObject;

public class StandAloneIO {
	
	
	
	 private static void runGC () throws Exception
	    {
	          _runGC ();
	    }
	    private static void _runGC () throws Exception
	    {
	            s_runtime.runFinalization ();
	            s_runtime.gc ();
	    }
	    private static long usedMemory ()
	    {
	        return s_runtime.totalMemory () - s_runtime.freeMemory ();
	    }
	    
	    private static final Runtime s_runtime = Runtime.getRuntime ();
	
	
	
	public static void main(String a[])  throws Exception{
		String data = "%7B%22n_item%22%3A20%2C%22facet%22%3A%7B%22all%22%3Atrue%2C%22max%22%3A-1%7D%2C%22query%22%3A%7B%22keyphrase%22%3A%5B%22jenas%22%5D%7D%2C%22content%22%3A%7B%22product%22%3A%7B%7D%7D%2C%22page_number%22%3A1%7D";		
		HttpClient httpclient = new HttpClient();
		GetMethod httpget = new GetMethod("https://apis-staging-ts.rfksrv.com/11250-154004989/3?data="+data);
		httpget.addRequestHeader("x-api-key", "00-154004989-b3Fkz2HRl2uRRmz0W1H0svrbgYPbKnEfT8S52jAeZ0DNVo9u");
	    httpget.addRequestHeader("Cache-Control", "no-cache");
					JSONObject resultJSON;
					try {
						httpclient.executeMethod(httpget);
						 runGC ();
						 System.out.println(httpget.getResponseBodyAsString());
						resultJSON = new JSONObject(httpget.getResponseBodyAsString());
						System.out.println(resultJSON);
					long stat = System.currentTimeMillis();
					
					 long  heap1 = usedMemory (); 
						JSONObject facetObj = (JSONObject) resultJSON.get("facet");
						//	System.out.println(resultJSON.get("facet"));
						StringBuffer sb = new StringBuffer();
						JSONArray jry  =((JSONObject)( (JSONObject) resultJSON.get("content")).get("product")).getJSONArray("value");
						for(int i = 0 ; i < jry.size() ; i++) {
							sb.append(((JSONObject)jry.get(i)).get("sku")+",");
						}
					   
						System.out.println(sb.toString().substring(0, sb.length() - 1));
						JSONArray opArray;
					    JSONObject opObj;
					    JSONObject parentObj;
					    JSONArray parentArray  = new JSONArray();
					    long heap2 = usedMemory (); // Take an after heap snapshot:
				        
				        final int size = Math.round (((float)(heap2 - heap1)));
				        System.out.println ("'before' heap: " + heap1 +
				                            ", 'after' heap: " + heap2);
				        System.out.println ("heap delta: " + (heap2 - heap1) +
				           "size = " + size + " bytes");
					    JSONObject keyvalue;
						for (Object key : facetObj.keySet()) {
					        parentObj  = new JSONObject();
					        parentObj.put("value",  (String)key);
					        keyvalue = (JSONObject)facetObj.get( (String)key);
					        JSONArray Jarray = keyvalue.getJSONArray("value");
					        opArray = new JSONArray();
					        JSONObject arObj;
					        for (int i = 0 ; i < Jarray.length() ; i++) {
					        	arObj = (JSONObject) Jarray.get(i);
					        	 opObj  = new JSONObject();
					        	opObj.put("extendedData" , new JSONObject().put("uniqueId", arObj.get("id")));
					        	opObj.put("label", arObj.get("text"));
					        	opObj.put("count", arObj.get("count"));
					        	opObj.put("value", arObj.get("text"));
					        	opArray.put(opObj);
					        }
					        parentObj.put("entry" , opArray);
					        parentArray.add(parentObj);
						}
						long end = System.currentTimeMillis();
						System.out.println("facet processing time" + (end - stat) + "ms" );
						//  runGC ();
					        
				//		System.out.println(parentArray);
					}
					catch (HttpException e1) {
						e1.printStackTrace();
					}
					catch (IOException e) {
						e.printStackTrace();
					}
				catch (JSONException e) {
					e.printStackTrace();
				}
				finally {
				    httpget.releaseConnection();
				  }
	}
}